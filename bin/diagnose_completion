#!/usr/bin/env bash
# Comprehensive completion system diagnostic script
# This script identifies exactly where completion interference occurs

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test counters
TESTS_PASSED=0
TESTS_FAILED=0
CRITICAL_FAILURES=0

# Change to project directory
cd "$(dirname "$0")/.."

echo -e "${BLUE}=== Freyja Completion System Diagnostic ===${NC}"
echo "This script will identify completion interference issues"
echo "================================================================"

# Function to run a test
run_test() {
    local test_name="$1"
    local test_command="$2"
    local expected_pattern="$3"
    local should_fail="${4:-false}"
    local critical="${5:-false}"
    
    echo -en "Testing: $test_name... "
    
    # Run the command and capture output
    set +e
    if [[ "$test_command" == *"timeout"* ]]; then
        # Command already includes timeout
        output=$(eval "$test_command" 2>&1)
        exit_code=$?
    else
        # Add timeout wrapper
        output=$(timeout 10s bash -c "$test_command" 2>&1)
        exit_code=$?
    fi
    set -e
    
    # Check if output matches expected pattern
    local test_passed=false
    if echo "$output" | grep -q "$expected_pattern"; then
        if [ "$should_fail" = "true" ]; then
            test_passed=false
        else
            test_passed=true
        fi
    else
        if [ "$should_fail" = "true" ]; then
            test_passed=true
        else
            test_passed=false
        fi
    fi
    
    if [ "$test_passed" = "true" ]; then
        echo -e "${GREEN}PASSED${NC}"
        ((TESTS_PASSED++))
    else
        if [ "$critical" = "true" ]; then
            echo -e "${RED}CRITICAL FAILURE${NC}"
            ((CRITICAL_FAILURES++))
        else
            echo -e "${RED}FAILED${NC}"
        fi
        echo "  Command: $test_command"
        echo "  Expected pattern: $expected_pattern (should_fail: $should_fail)"
        echo "  Exit code: $exit_code"
        echo "  Output: $output"
        echo ""
        ((TESTS_FAILED++))
    fi
}

echo ""
echo -e "${BLUE}Phase 1: Environment Analysis${NC}"
echo "------------------------------"

# Check for any persistent completion environment variables
echo "Current environment variables (FREYJA related):"
env | grep -i freyja || echo "  None found"

echo ""
echo "ZSH completion registration:"
if command -v compdef >/dev/null 2>&1; then
    echo "  compdef available: ✅"
    if [ -n "${_comps[cls_example]:-}" ]; then
        echo "  cls_example registration: ${_comps[cls_example]}"
    else
        echo "  cls_example registration: ❌ NOT REGISTERED"
    fi
else
    echo "  compdef available: ❌"
fi

echo ""
echo -e "${BLUE}Phase 2: Critical Normal Execution Tests${NC}"
echo "--------------------------------------------"

# CRITICAL: Test that normal execution shows help, not "completion"
run_test "cls_example normal execution shows help" \
    "PYTHONPATH=. python examples/cls_example" \
    "Usage:\|usage:" \
    false \
    true

run_test "cls_example does NOT output just 'completion'" \
    "PYTHONPATH=. python examples/cls_example | grep -x completion" \
    "." \
    true \
    true

run_test "mod_example normal execution shows help" \
    "PYTHONPATH=. python examples/mod_example" \
    "Usage:\|usage:" \
    false \
    true

echo ""
echo -e "${BLUE}Phase 3: Completion Detection Logic Tests${NC}"
echo "---------------------------------------------"

# Test completion detection accuracy
run_test "Completion NOT detected without env vars" \
    "PYTHONPATH=. python -c 'from freyja.freyja_cli import FreyjaCLI; from examples.cls_example import DataProcessor; cli = FreyjaCLI(DataProcessor); print(cli._is_completion_request())'" \
    "False"

run_test "Completion IS detected with _FREYJA_COMPLETE" \
    "_FREYJA_COMPLETE=zsh PYTHONPATH=. python -c 'from freyja.freyja_cli import FreyjaCLI; from examples.cls_example import DataProcessor; cli = FreyjaCLI(DataProcessor); print(cli._is_completion_request())'" \
    "True"

echo ""
echo -e "${BLUE}Phase 4: Completion Functionality Tests${NC}"
echo "--------------------------------------------"

# Test that completion works when requested
run_test "ZSH completion generates output" \
    "_FREYJA_COMPLETE=zsh COMP_WORDS_STR='examples/cls_example fo' COMP_CWORD_NUM=2 PYTHONPATH=. python examples/cls_example --_complete" \
    "foo"

run_test "ZSH completion for system commands" \
    "_FREYJA_COMPLETE=zsh COMP_WORDS_STR='examples/cls_example sys' COMP_CWORD_NUM=2 PYTHONPATH=. python examples/cls_example --_complete" \
    "system"

echo ""
echo -e "${BLUE}Phase 5: Environmental Isolation Tests${NC}"
echo "--------------------------------------------"

# Test that completion doesn't pollute environment for subsequent runs
echo "Testing environment isolation..."

# Run completion
_FREYJA_COMPLETE=zsh COMP_WORDS_STR='examples/cls_example fo' COMP_CWORD_NUM=2 PYTHONPATH=. python examples/cls_example --_complete > /dev/null 2>&1

# Immediately test normal execution
run_test "Normal execution works after completion" \
    "PYTHONPATH=. python examples/cls_example" \
    "Usage:\|usage:" \
    false \
    true

run_test "No completion output after completion run" \
    "PYTHONPATH=. python examples/cls_example | grep -x completion" \
    "." \
    true \
    true

echo ""
echo -e "${BLUE}Phase 6: Command Execution Tests${NC}"
echo "------------------------------------"

# Test actual command execution
run_test "Command execution works (foo command)" \
    "PYTHONPATH=. python examples/cls_example foo --text 'test'" \
    "test"

run_test "Help flags work at different levels" \
    "PYTHONPATH=. python examples/cls_example --help" \
    "Usage:\|usage:"

run_test "Group help works" \
    "PYTHONPATH=. python examples/cls_example system --help" \
    "System\|SYSTEM"

echo ""
echo -e "${BLUE}Phase 7: Parser State Tests${NC}"
echo "------------------------------"

# Test that parser doesn't retain stale state
run_test "Parser handles empty args correctly" \
    "PYTHONPATH=. python -c 'from freyja.parser.command_parser import CommandParser; from freyja.command.command_tree import CommandTree; t = CommandTree(); t.add_command(\"test\", {}); p = CommandParser(t); r = p.parse([]); print(\"is_help:\", r.is_help)'" \
    "is_help: True"

echo ""
echo -e "${BLUE}Phase 8: Integration Test${NC}"
echo "----------------------------"

# Run a comprehensive integration test
echo "Running integration sequence..."

# 1. Normal execution
NORMAL_OUTPUT=$(PYTHONPATH=. python examples/cls_example 2>&1)
echo "Normal execution output length: ${#NORMAL_OUTPUT} characters"

if echo "$NORMAL_OUTPUT" | grep -q "Usage:"; then
    echo -e "  Normal execution: ${GREEN}✅${NC}"
else
    echo -e "  Normal execution: ${RED}❌${NC}"
    echo "  Output: $NORMAL_OUTPUT"
    ((CRITICAL_FAILURES++))
fi

# 2. Completion
COMPLETION_OUTPUT=$(_FREYJA_COMPLETE=zsh COMP_WORDS_STR='examples/cls_example fo' COMP_CWORD_NUM=2 PYTHONPATH=. python examples/cls_example --_complete 2>&1)
if echo "$COMPLETION_OUTPUT" | grep -q "foo"; then
    echo -e "  Completion: ${GREEN}✅${NC}"
else
    echo -e "  Completion: ${RED}❌${NC}"
    echo "  Output: $COMPLETION_OUTPUT"
fi

# 3. Normal execution after completion
AFTER_OUTPUT=$(PYTHONPATH=. python examples/cls_example 2>&1)
if echo "$AFTER_OUTPUT" | grep -q "Usage:"; then
    echo -e "  After completion: ${GREEN}✅${NC}"
else
    echo -e "  After completion: ${RED}❌ CRITICAL${NC}"
    echo "  Output: $AFTER_OUTPUT"
    ((CRITICAL_FAILURES++))
fi

echo ""
echo "================================================================"
echo -e "${BLUE}DIAGNOSTIC SUMMARY${NC}"
echo "================================================================"
echo "Tests passed: $TESTS_PASSED"
echo "Tests failed: $TESTS_FAILED"
echo -e "Critical failures: ${RED}$CRITICAL_FAILURES${NC}"
echo ""

if [ $CRITICAL_FAILURES -eq 0 ]; then
    echo -e "${GREEN}✅ COMPLETION SYSTEM IS WORKING CORRECTLY${NC}"
    echo "No critical issues detected."
    exit 0
else
    echo -e "${RED}❌ CRITICAL COMPLETION SYSTEM ISSUES DETECTED${NC}"
    echo ""
    echo "Issues found:"
    if [ $CRITICAL_FAILURES -gt 0 ]; then
        echo "- Normal command execution is broken"
        echo "- Completion may be interfering with normal execution"
    fi
    echo ""
    echo "Recommended actions:"
    echo "1. Fix completion detection logic"
    echo "2. Ensure proper environment isolation"
    echo "3. Check execution coordinator flow"
    exit 1
fi