#!/bin/bash

# tag_version - Create git tags for Freyja releases and update poetry version
# Usage: ./bin/tag_version [version]
#   If version is provided, tags with that version (e.g., "1.0.5")
#   If no version provided, auto-increments patch version from latest tag

set -euo pipefail

# Colors for pretty output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}‚Ñπ${NC} $1"
}

log_success() {
    echo -e "${GREEN}‚úì${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}‚ö†${NC} $1"
}

log_error() {
    echo -e "${RED}‚úó${NC} $1" >&2
}

log_step() {
    echo -e "\n${BOLD}$1${NC}"
}

# Validate we're in a git repository
validate_git_repo() {
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        log_error "Not in a git repository"
        exit 1
    fi
}

# Validate working directory is clean
validate_clean_repo() {
    if ! git diff-index --quiet HEAD --; then
        log_warning "Working directory has uncommitted changes"
        git status --short
        read -p "Continue anyway? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Aborting"
            exit 1
        fi
    fi
}

# Get the latest tag
get_latest_tag() {
    git describe --tags --abbrev=0 2>/dev/null || echo ""
}

# Increment patch version
increment_patch_version() {
    local version=$1
    # Remove 'v' prefix if present
    version=${version#v}
    
    # Split version into parts using parameter expansion
    local major minor patch
    major="${version%%.*}"
    local temp="${version#*.}"
    minor="${temp%%.*}"
    patch="${temp#*.}"
    
    # Validate we have three parts
    if [[ -z "$major" || -z "$minor" || -z "$patch" ]] || [[ "$version" != "$major.$minor.$patch" ]]; then
        log_error "Invalid version format: $version (expected X.Y.Z)"
        exit 1
    fi
    
    # Increment patch version
    ((patch++))
    
    echo "$major.$minor.$patch"
}

# Validate version format
validate_version() {
    local version=$1
    # Remove 'v' prefix for validation
    version=${version#v}
    
    if [[ ! $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        log_error "Invalid version format: $version (expected X.Y.Z)"
        exit 1
    fi
}

# Check if tag already exists
check_tag_exists() {
    local tag=$1
    if git rev-parse "$tag" >/dev/null 2>&1; then
        log_error "Tag '$tag' already exists"
        exit 1
    fi
}

# Create git tag
create_tag() {
    local version=$1
    local tag="v$version"
    local message="Version $version of Freyja, the zero configuration CLI tool"
    
    log_info "Creating tag: $tag"
    log_info "Message: $message"
    
    git tag -a "$tag" -m "$message"
    log_success "Created tag $tag"
}

# Run poetry build
run_poetry_build() {
    log_step "Building package with Poetry..."
    if poetry build; then
        log_success "Poetry build completed successfully"
    else
        log_error "Poetry build failed"
        exit 1
    fi
}

# Show poetry version
show_poetry_version() {
    log_step "Current Poetry version:"
    poetry version
}

# Main function
main() {
    local version=""
    
    log_step "üè∑Ô∏è  Freyja Version Tagging Script"
    
    # Validate environment
    validate_git_repo
    validate_clean_repo
    
    # Determine version
    if [ $# -eq 0 ]; then
        # Auto-increment from latest tag
        local latest_tag=$(get_latest_tag)
        
        if [ -z "$latest_tag" ]; then
            log_error "No existing tags found. Please provide a version manually."
            echo "Usage: $0 [version]"
            exit 1
        fi
        
        log_info "Latest tag: $latest_tag"
        version=$(increment_patch_version "$latest_tag")
        log_info "Auto-incrementing to: $version"
        
    elif [ $# -eq 1 ]; then
        # Use provided version
        version="$1"
        # Remove 'v' prefix if user provided it
        version=${version#v}
        log_info "Using provided version: $version"
    else
        log_error "Too many arguments"
        echo "Usage: $0 [version]"
        exit 1
    fi
    
    # Validate version format
    validate_version "$version"
    
    # Check if tag already exists
    local tag="v$version"
    check_tag_exists "$tag"
    
    # Create the tag
    create_tag "$version"
    
    # Run poetry build
    run_poetry_build
    
    # Show current version
    show_poetry_version
    
    # Success summary
    log_step "üéâ Success!"
    log_success "Tagged version: $tag"
    log_success "Package built successfully"
    log_info "To push the tag, run: ${BOLD}git push --follow-tags${NC}"
}

# Run main function with all arguments
main "$@"