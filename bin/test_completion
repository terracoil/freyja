#!/usr/bin/env bash
# Comprehensive Freyja completion system test
# Tests both completion functionality AND normal execution

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test counters
TESTS_PASSED=0
TESTS_FAILED=0
CRITICAL_FAILURES=0

cd /Users/windfox/src/freyja
export PYTHONPATH=.

echo -e "${BLUE}=== Freyja Completion System Test ===${NC}"
echo "Testing both completion functionality AND normal execution"
echo "=========================================================="

# Function to run a test
run_test() {
    local test_name="$1"
    local test_command="$2"
    local expected_pattern="$3"
    local should_fail="${4:-false}"
    local critical="${5:-false}"
    
    echo -en "Testing: $test_name... "
    
    # Run the command and capture output
    set +e
    output=$(timeout 10s bash -c "$test_command" 2>&1) || true
    exit_code=$?
    set -e
    
    # Check if output matches expected pattern
    local test_passed=false
    if echo "$output" | grep -q "$expected_pattern"; then
        if [ "$should_fail" = "true" ]; then
            test_passed=false
        else
            test_passed=true
        fi
    else
        if [ "$should_fail" = "true" ]; then
            test_passed=true
        else
            test_passed=false
        fi
    fi
    
    if [ "$test_passed" = "true" ]; then
        echo -e "${GREEN}PASSED${NC}"
        ((TESTS_PASSED++))
    else
        if [ "$critical" = "true" ]; then
            echo -e "${RED}CRITICAL FAILURE${NC}"
            ((CRITICAL_FAILURES++))
        else
            echo -e "${RED}FAILED${NC}"
            ((TESTS_FAILED++))
        fi
        echo "  Command: $test_command"
        echo "  Expected pattern: $expected_pattern (should_fail: $should_fail)"
        echo "  Exit code: $exit_code"
        echo "  Output: $output"
        echo ""
    fi
}

echo ""
echo -e "${BLUE}1. Critical: Normal Execution Must Work${NC}"
echo "----------------------------------------"

# CRITICAL: These tests verify that normal execution works correctly
run_test "cls_example shows usage (not 'completion')" \
    "PYTHONPATH=. python examples/cls_example" \
    "usage:\|Usage:" \
    false \
    true

run_test "cls_example does NOT output just 'completion'" \
    "PYTHONPATH=. python examples/cls_example | head -1 | grep -x 'completion'" \
    "." \
    true \
    true

run_test "mod_example shows usage" \
    "PYTHONPATH=. python examples/mod_example" \
    "usage:\|Usage:" \
    false \
    true

run_test "system_example shows usage" \
    "PYTHONPATH=. python examples/system_example" \
    "usage:\|Usage:" \
    false \
    true

echo ""
echo -e "${BLUE}2. Command Execution Tests${NC}"
echo "----------------------------"

run_test "cls_example foo command works" \
    "PYTHONPATH=. python examples/cls_example foo --text 'test'" \
    "test"

run_test "cls_example help works" \
    "PYTHONPATH=. python examples/cls_example --help" \
    "usage:\|Usage:"

run_test "mod_example greet command works" \
    "PYTHONPATH=. python examples/mod_example greet --name 'Test'" \
    "Hello, Test\|Test"

echo ""
echo -e "${BLUE}3. Completion Functionality Tests${NC}"
echo "--------------------------------"

run_test "ZSH completion: fo -> foo" \
    "_FREYJA_COMPLETE=zsh COMP_WORDS_STR='examples/cls_example fo' COMP_CWORD_NUM=2 PYTHONPATH=. python examples/cls_example --_complete" \
    "foo"

run_test "ZSH completion: sys -> system" \
    "_FREYJA_COMPLETE=zsh COMP_WORDS_STR='examples/cls_example sys' COMP_CWORD_NUM=2 PYTHONPATH=. python examples/cls_example --_complete" \
    "system"

run_test "Bash completion works" \
    "_FREYJA_COMPLETE=bash COMP_WORDS_STR='examples/cls_example fo' COMP_CWORD_NUM=2 PYTHONPATH=. python examples/cls_example --_complete" \
    "foo"

echo ""
echo -e "${BLUE}4. Environmental Isolation Tests${NC}"
echo "----------------------------------"

echo "Testing that completion doesn't interfere with subsequent normal executions..."

# Test multiple completion scenarios followed by normal execution
echo "  Running ZSH completion for 'fo'..."
_FREYJA_COMPLETE=zsh COMP_WORDS_STR='examples/cls_example fo' COMP_CWORD_NUM=2 PYTHONPATH=. python examples/cls_example --_complete > /dev/null 2>&1

run_test "Normal execution works after ZSH 'fo' completion" \
    "PYTHONPATH=. python examples/cls_example" \
    "usage:\|Usage:" \
    false \
    true

run_test "No 'completion' output after ZSH completion" \
    "PYTHONPATH=. python examples/cls_example | head -1 | grep -x 'completion'" \
    "." \
    true \
    true

echo "  Running ZSH completion for 'sys'..."
_FREYJA_COMPLETE=zsh COMP_WORDS_STR='examples/cls_example sys' COMP_CWORD_NUM=2 PYTHONPATH=. python examples/cls_example --_complete > /dev/null 2>&1

run_test "Normal execution works after ZSH 'sys' completion" \
    "PYTHONPATH=. python examples/cls_example" \
    "usage:\|Usage:" \
    false \
    true

echo "  Running Bash completion..."
_FREYJA_COMPLETE=bash COMP_WORDS_STR='examples/cls_example fo' COMP_CWORD_NUM=2 PYTHONPATH=. python examples/cls_example --_complete > /dev/null 2>&1

run_test "Normal execution works after Bash completion" \
    "PYTHONPATH=. python examples/cls_example" \
    "usage:\|Usage:" \
    false \
    true

echo "  Testing command execution after completion..."
run_test "Command execution works after completion" \
    "PYTHONPATH=. python examples/cls_example foo --text 'post-completion-test'" \
    "post-completion-test"

echo ""
echo -e "${BLUE}5. Shell Integration Tests (if available)${NC}"
echo "--------------------------------------------"

# Check shell-specific completion registration
SHELL_NAME=$(basename "$SHELL")
if [ "$SHELL_NAME" = "zsh" ]; then
    if [ -f ~/.zfunc/_cls_example ]; then
        echo -e "${GREEN}✓${NC} ZSH completion file found at ~/.zfunc/_cls_example"
    else
        echo -e "${YELLOW}!${NC} ZSH completion not installed. Run: python examples/cls_example system completion install --shell zsh"
    fi
elif [ "$SHELL_NAME" = "bash" ]; then
    if grep -q "cls_example" ~/.bashrc 2>/dev/null || grep -q "cls_example" ~/.bash_profile 2>/dev/null; then
        echo -e "${GREEN}✓${NC} Bash completion appears to be configured"
    else
        echo -e "${YELLOW}!${NC} Bash completion not installed. Run: python examples/cls_example system completion install --shell bash"
    fi
fi

echo ""
echo "=========================================================="
echo -e "${BLUE}TEST SUMMARY${NC}"
echo "=========================================================="
echo "Passed: $TESTS_PASSED"
echo "Failed: $TESTS_FAILED"
echo -e "Critical failures: ${RED}$CRITICAL_FAILURES${NC}"
echo ""

if [ $CRITICAL_FAILURES -eq 0 ] && [ $TESTS_FAILED -eq 0 ]; then
    echo -e "${GREEN}✅ ALL TESTS PASSED!${NC}"
    echo "The completion system is working correctly."
    echo ""
    echo "Manual tests you can try:"
    echo "  examples/cls_example fo<TAB>    (should complete to 'foo')"
    echo "  examples/cls_example sys<TAB>   (should complete to 'system')" 
    echo "  examples/cls_example <TAB>      (should show all commands)"
    exit 0
elif [ $CRITICAL_FAILURES -gt 0 ]; then
    echo -e "${RED}❌ CRITICAL ISSUES FOUND!${NC}"
    echo ""
    echo "CRITICAL problems detected:"
    echo "- Normal command execution may be broken"
    echo "- Completion may be interfering with normal execution"
    echo ""
    echo "The completion system is NOT working correctly."
    exit 2
else
    echo -e "${YELLOW}⚠️  SOME TESTS FAILED${NC}"
    echo ""
    echo "Some tests failed, but critical functionality works."
    echo "Review the failed tests above for details."
    exit 1
fi
